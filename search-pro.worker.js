const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":74,\"nextId\":74,\"documentIds\":{\"0\":\"1\",\"1\":\"1#写在前面-prologue\",\"2\":\"1#缘由-reason\",\"3\":\"1#我-myself\",\"4\":\"1#指南-navigation\",\"5\":\"3\",\"6\":\"3#stage-1-2024-4-——-2024-5\",\"7\":\"3#stage-2-2024-5-——-2024-7\",\"8\":\"4\",\"9\":\"4#heading-2\",\"10\":\"4#heading-3\",\"11\":\"4@0\",\"12\":\"4@1\",\"13\":\"5\",\"14\":\"5#定义-definition\",\"15\":\"5#元胞-cell\",\"16\":\"5#元胞空间-space\",\"17\":\"5#元胞邻居-neighbour\",\"18\":\"5#边界条件-boundary\",\"19\":\"5#元胞规则-rule\",\"20\":\"5#生命游戏-the-game-of-life\",\"21\":\"5#应用-application\",\"22\":\"5@0\",\"23\":\"6\",\"24\":\"6#heading-2\",\"25\":\"6#heading-3\",\"26\":\"6@0\",\"27\":\"6@1\",\"28\":\"7\",\"29\":\"7#heading-2\",\"30\":\"7#heading-3\",\"31\":\"7@0\",\"32\":\"7@1\",\"33\":\"8\",\"34\":\"8#heading-2\",\"35\":\"8#heading-3\",\"36\":\"8@0\",\"37\":\"8@1\",\"38\":\"9\",\"39\":\"9#heading-2\",\"40\":\"9#heading-3\",\"41\":\"9@0\",\"42\":\"9@1\",\"43\":\"10\",\"44\":\"10#概述\",\"45\":\"10#问题描述\",\"46\":\"10#模型设置\",\"47\":\"10#基本设置\",\"48\":\"10#更新规则\",\"49\":\"10#部分代码解释\",\"50\":\"10#参数设置\",\"51\":\"10#参数计算\",\"52\":\"10#结果\",\"53\":\"10@0\",\"54\":\"10@1\",\"55\":\"11\",\"56\":\"11#heading-2\",\"57\":\"11#heading-3\",\"58\":\"11@0\",\"59\":\"11@1\",\"60\":\"13\",\"61\":\"13#heading-2\",\"62\":\"13#heading-3\",\"63\":\"13@0\",\"64\":\"13@1\",\"65\":\"18\",\"66\":\"19\",\"67\":\"20\",\"68\":\"21\",\"69\":\"22\",\"70\":\"23\",\"71\":\"24\",\"72\":\"25\",\"73\":\"26\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,3],\"1\":[1,30],\"2\":[1,21],\"3\":[1,62],\"4\":[1,24],\"5\":[4,3],\"6\":[5,3],\"7\":[5,2],\"8\":[2],\"9\":[2,5],\"10\":[2,5],\"11\":[null,null,1],\"12\":[null,null,1],\"13\":[3,6],\"14\":[1,28],\"15\":[1,12],\"16\":[1,10],\"17\":[1,26],\"18\":[1,17],\"19\":[1,22],\"20\":[1,40],\"21\":[1,63],\"22\":[null,null,1],\"23\":[2],\"24\":[2,5],\"25\":[2,5],\"26\":[null,null,1],\"27\":[null,null,1],\"28\":[1],\"29\":[2,5],\"30\":[2,5],\"31\":[null,null,1],\"32\":[null,null,1],\"33\":[1],\"34\":[2,5],\"35\":[2,5],\"36\":[null,null,1],\"37\":[null,null,1],\"38\":[1],\"39\":[2,5],\"40\":[2,5],\"41\":[null,null,1],\"42\":[null,null,1],\"43\":[3,7],\"44\":[1,78],\"45\":[1,21],\"46\":[1],\"47\":[1,15],\"48\":[1,64],\"49\":[1,3],\"50\":[1,111],\"51\":[1,138],\"52\":[1,6],\"53\":[null,null,1],\"54\":[null,null,1],\"55\":[2],\"56\":[2,5],\"57\":[2,5],\"58\":[null,null,1],\"59\":[null,null,1],\"60\":[2],\"61\":[2,5],\"62\":[2,5],\"63\":[null,null,1],\"64\":[null,null,1],\"65\":[1,3],\"66\":[1],\"67\":[1],\"68\":[1],\"69\":[1],\"70\":[1],\"71\":[1],\"72\":[2],\"73\":[2]},\"averageFieldLength\":[1.6906243506679537,20.599855765672277,0.4242172234662256],\"storedFields\":{\"0\":{\"h\":\"简介 Introduction\",\"t\":[\"👋 欢迎来到我的博客！\"]},\"1\":{\"h\":\"写在前面\",\"t\":[\"其实很早就萌生过写 blog 的想法，但总感觉很难，很麻烦，不想走出舒适圈，所以迟迟不肯行动。\",\"但痛定思痛，觉得还是要尝试些新东西，所以便有了现在这个页面。\",\"刚开始的过程确实很难，很多新东西从未见过，一时难以消化吸收，过程中还遇到很多莫名其妙的小 bug。\",\"但还好有dream-oyh的帮助，让我顺利解决了很多问题，在此表示十分感谢！💖\",\"目前还是处于入门小白阶段，还有很多排版、布局、内容方面有待优化，我会逐步去完善。\",\"下面来 talk about myself。\"]},\"2\":{\"h\":\"缘由\",\"t\":[\"👐 决定写 blog 原因大致有以下几点：\",\"很早就有的想法（想当一个知识区博主、音乐区 up 主），目前先尝试一个。\",\"准备夏令营过程中，发现自己之前做过的很多小项目、写过的很多代码、学过的知识都记不清了，如果之前有所记录就很便于回忆，而且复习过程中也苦于没有地方整理，blog 就显得非常合适。\",\"周边盆友的影响👬。\",\"走出舒适圈，尝试新的记录生活的方式。\"]},\"3\":{\"h\":\"我\",\"t\":[\"职业： 一名在读 CSUer 🏫，对，就是那个California State University(bushi)。\",\"星座： 水瓶座 \",\"成分： Swiftie 🍓 一枚。\",\"人格： INFJ 绿老头一枚。\",\"爱好： LOL、听歌 🎧、唱歌 🎤、吉他 🎸、足球 ⚽。\",\"自我评价：自我感觉是一个矛盾体，看待问题十分的现实，但同时也是一个理想的完美主义者；绝对的宿命论主义倾向；梦想很多，却也逐渐看清了生活的本质，但还是希望自己未来能成为一个有用之人，探究生命的意义，世界之本质 💭 。\",\"📝 目前小小的愿望清单\",\" 进入到梦中情组\",\" 现场看一场 LOL 比赛(S 赛/MSI/EDG 比赛)\",\" 看一次霉妈的演唱会\",\" 现场看一次球赛（世界杯/国家队比赛/亚冠/欧冠/欧洲杯......）\",\" 冰岛/欧洲游\",\"twin flame who？\",\" 统一\",\" 国足进世界杯\"]},\"4\":{\"h\":\"指南\",\"t\":[\"目前博客内容主要为过去做过的一些项目、小研究、自学内容的整理等，有时间也会加入书评、乐评、随笔等其他内容。\",\"交通 主要记录本专业一些基础模型的代码实现。\",\"机器学习 主要为自学 ML 笔记及代码。\",\"数模 总结自己参加数模比赛过程中，常见的模型、算法整理。\",\"英语 交通方向的英文文献、交通方面的理论知识（英文）\",\"Blog 记录博主更新历程及计划。\",\"❤️ 感谢你看到这里 ❤️\"]},\"5\":{\"h\":\"Ryan Lee 的 blog\",\"t\":[\"Welcome!\",\"这里是我学习更新博客的阶段性工作记录。\"]},\"6\":{\"h\":\"Stage 1 2024.4 —— 2024.5\",\"t\":[\"🔨 入门，搭框架\"]},\"7\":{\"h\":\"stage 2 2024.5 —— 2024.7\",\"t\":[\"✏️ 更新各部分文章\"]},\"8\":{\"h\":\"A*算法\"},\"9\":{\"h\":\"Heading 2\",\"t\":[\"Here is the content.\"]},\"10\":{\"h\":\"Heading 3\",\"t\":[\"Here is the content.\"]},\"11\":{\"c\":[\"交通\"]},\"12\":{\"c\":[\"traffic\"]},\"13\":{\"h\":\"元胞自动机 Cellular Automata\",\"t\":[\"本节简单介绍一下元胞自动机模型，包括其定义、基本概念、应用等方面，具体讲解可以看这篇文章与这篇文章。\"]},\"14\":{\"h\":\"定义\",\"t\":[\"元胞自动机（Cellular Automata, CA）是自动机理论（Theory of automata）中的一种离散计算模型，最初由Stanislaw Ulam和John von Neumann 于 20 世纪 40 年代在洛斯阿拉莫斯国家实验室同时提出[1]。一个完整的元胞自动机模型包含 元胞、元胞空间、元胞邻居、元胞边界、元胞规则 五大部分，下面将分别做进一步阐述。\"]},\"15\":{\"h\":\"元胞\",\"t\":[\"元胞是 CA 模型的基本单元，是模型迭代的直接参与者，从概念上就可以理解元胞就好似生物体的细胞。每一个元胞都有一个状态,一般为二维（如 0-1），复杂情况下也有多维。\"]},\"16\":{\"h\":\"元胞空间\",\"t\":[\"元胞空间为空间内元胞的集合，即按一定方式对空间划分，元胞呈一定形状。元胞空间划分方式大致有 正方形（类似栅格化）、三角形、正六边形 等类型。\"]},\"17\":{\"h\":\"元胞邻居\",\"t\":[\"元胞邻居是某一元胞周围的元胞，是否为邻居，取决于元胞状态更新时所要搜索的空间域，在二维空间下，最常用的邻居类型是 Moore 型和 Von Neumann 型，如图一所示：\",\"图1 元胞类型\",\"Moore 邻居定义为下式：\",\"NM​(x0​,y0​)={(x,y):∣x−x0​∣<=r,∣y−y0​∣<=r}\",\"Von Neumann 邻居定义为：\",\"NV​(x0​,y0​)={(x,y):∣x−x0​∣+∣y−y0​∣<=r}\"]},\"18\":{\"h\":\"边界条件\",\"t\":[\"边界条件是元胞空间外的部分，是为了让最外围元胞能够有像内部元胞一样的邻域条件所创建的虚拟元胞。常用的邻居边界条件类型有：固定型，周期型，绝热型和映射型这四种，常用为固定型和周期型。\",\"注\",\"固定型：在外围补上固定不变的、虚拟的元胞。\",\"周期型：每个维度的第一个元胞与最后一个元胞互为边界。\",\"绝热型：边界元胞与自己相同。\",\"映射型：边界元胞为元胞每个维度内侧邻近元胞。 一般常用为固定型和周期型边界条件。\"]},\"19\":{\"h\":\"元胞规则\",\"t\":[\"元胞规则即每次迭代，每个元胞按照当前状态及周围邻居的状态来更新下一时刻该元胞状态，每个元胞按照该规则进行状态更新，相互作用，由局部到整体，从而引起全局的变化。元胞规则是整个 CA 模型最为关键的部分。\",\"相关信息\",\"元胞自动机更新规则特征[2]：\",\"离散型：空间、时间及状态都是离散的;\",\"同质性：服从相同的规律分布方式相同；\",\"并行性：元胞的状态更新规则变化是同步进行的；\",\"高维度：元胞自动机是一类无穷维动力系统。\"]},\"20\":{\"h\":\"生命游戏\",\"t\":[\"生命游戏是最著名的二维元胞自动机生命游戏，由John Conway于 1970 年设计。它由二维元胞网格组成，其状态可能是死亡 (0) 或活着 (1)。该游戏采用标准 Moore 邻居，其元胞规则为：\",\"对于“活着”的格子，若它的 8 个 Moore 邻居中有 2-3 个为“活着”，则该格继续保持“活着”，否则就变为“死亡”。 对于“死亡”的格子，若它的 8 个邻居中有 3 个“生”，则该格变为“生”，否则继续保持“死”。\",\"用函数表示如下：\",\"vt+1(α)=⎩⎨⎧​0,νt(α),1,​S<2∨S>3S=2S=3​\",\"图2 生命游戏\"]},\"21\":{\"h\":\"应用\",\"t\":[\"元胞自动机的应用大致有以下几类：\",\"作为物理、化学、生物过程的基础模型\",\"计算单元\",\"模拟现实复杂动态系统\",\"英文总结\",\"Cellular automaton is a discrete computing model in the Theory of automata. A complete cellular automaton model includes five parts: cell, cell space, cell neighbor, cell boundary, and cell rules. Each cell has a state which can be 0 or 1, alive or dead. Each cell follows a set of rules and updates the state at every time step based on the current state and their neighbors' state, thereby triggering global changes. It has many applications in computing and simulation.\"]},\"22\":{\"c\":[\"交通\"]},\"23\":{\"h\":\"改进A*算法\"},\"24\":{\"h\":\"Heading 2\",\"t\":[\"Here is the content.\"]},\"25\":{\"h\":\"Heading 3\",\"t\":[\"Here is the content.\"]},\"26\":{\"c\":[\"交通\"]},\"27\":{\"c\":[\"traffic\"]},\"28\":{\"h\":\"迪杰斯特拉算法\"},\"29\":{\"h\":\"Heading 2\",\"t\":[\"Here is the content.\"]},\"30\":{\"h\":\"Heading 3\",\"t\":[\"Here is the content.\"]},\"31\":{\"c\":[\"交通\"]},\"32\":{\"c\":[\"traffic\"]},\"33\":{\"h\":\"佛洛依德算法\"},\"34\":{\"h\":\"Heading 2\",\"t\":[\"Here is the content.\"]},\"35\":{\"h\":\"Heading 3\",\"t\":[\"Here is the content.\"]},\"36\":{\"c\":[\"交通\"]},\"37\":{\"c\":[\"traffic\"]},\"38\":{\"h\":\"NS模型\"},\"39\":{\"h\":\"Heading 2\",\"t\":[\"Here is the content.\"]},\"40\":{\"h\":\"Heading 3\",\"t\":[\"Here is the content.\"]},\"41\":{\"c\":[\"交通\"]},\"42\":{\"c\":[\"traffic\"]},\"43\":{\"h\":\"行人流仿真 Pedestrian Simulation\",\"t\":[\"本文探讨基于 CA 模型的行人流仿真，如果你还不了解 CA 模型，请先移步这篇文章。\"]},\"44\":{\"h\":\"概述\",\"t\":[\"行人流仿真是通过模拟人群在不同环境下的移动，研究行人行为及心理的特点的研究，其在城市规划、交通管理、疏散计划、建筑平面设计等方面有着广泛的应用。\",\"Pedestrian simulation studies pedestrians' behavioral patterns and psychological aspects by modeling and simulating the movement of crowds in various scnarios. It finds extensive applications in urban planning, traffic management, evacuation planning, and architectural layout design.\",\"分类\",\"行人流仿真按仿真规模可以大致分为三种，即 宏观(macroscopic) 、 微观(microscopic) 、介于宏微观之间(mesoscopic) 这三种。\",\"宏观：以整个人群为研究对象，研究整体移动特征如速度、密度、流向等，每个个体没有行为特征，最为常见方法为流体动力学模型(fluid dynamic model)。\",\"微观：以个体为研究对象，研究个体行为，每个个体有着独特的行为特征，常见模型是社会力模型（social force model）。\",\"介观：介于宏微观之间，人群中每个个体有着相同的行为特征，既研究整体特征也研究个体特征，常见是元胞自动机模型（cellular automata, CA）。\",\"⏩ 不同方法并非只适用于一个规模，如 CA 模型也可以在微观层面研究。此外，其他方法还有网络模型、自然模型、格子气模型以及基于机器学习的模型等，对行人流仿真进一步了解可以移步此篇论文\"]},\"45\":{\"h\":\"问题描述\",\"t\":[\"模拟行人穿过以平台\",\"相关信息\",\"平台基本信息：\",\"平台 16×30，左三个入口，大小分别为 1×1,1×4,1×1，右四个出口，均为 1×1，中间设有障碍，行人不得通过障碍。\",\"行人每秒走一格，每个行人占一格。\",\"行人随机从各个入口进入。\",\"规定仿真时间为 960s\",\"图1 平面示意图 \"]},\"46\":{\"h\":\"模型设置\"},\"47\":{\"h\":\"基本设置\",\"t\":[\"元胞：状态设置为占有（0）与不占有（1）\",\"元胞空间：划分为方格形。\",\"元胞邻居：采用基本 Moore 型（r=1）\",\"边界条件：采用固定型。\"]},\"48\":{\"h\":\"更新规则\",\"t\":[\"更新规则即行人如何选择下一步走到哪里一个方格，这里引入元胞潜能，其定义如下：\",\"Ni,j​=Ei,j​exp(kS​Si,j​+kD​Di,j​)\",\"其中，Ei,j​ 代表位置(i, j)处元胞状态，0 代表占有，1 代表不占有，Ni,j​ 代表位置(i, j)处的元胞潜能，可以发现，当元胞占有时 Ei,j​=0 ，即该处元胞潜能为 0，反应了元胞有人占据，就无法选择。Si,j​ 为元胞静态势能，Di,j​ 为元胞动态势能， kS​ 和 kD​ 分别为对应系数。\",\"元胞静态势能反应了行人在选择下一步时，环境中静止物体的影响，这里主要考虑为出口与障碍物，定义为：\",\"Si,j​=kL​Li,j​+kO​Oi,j​\",\"其中，Li,j​ 为位置为(i, j)的元胞距出口的距离，Oi,j​ 为位置为(i, j)的元胞周边的非障碍数目。\",\"元胞动态势能反应行人在选择下一步时，环境的动态影响，这里以位置为(i, j)的元胞周围空元胞数目 Di,j​ 为指标。\",\"所以最后，元胞潜能可以写为：\",\"Ni,j​=Ei,j​exp(k1​Li,j​+k2​Oi,j​+k3​Di,j​)\",\"最后对 9 个位置进行标号、对元胞潜能进行归一化，即可得到选择 9 个位置的选择概率 Pi,j​。\",\"图2 Moore邻居选择示意图\"]},\"49\":{\"h\":\"部分代码解释\",\"t\":[\"代码整体思路如下：\",\"图3 代码流程图\"]},\"50\":{\"h\":\"参数设置\",\"t\":[\"clc,clear format short; n=16; %平台宽度 h=30; %平台长度 star_x = ones(1,6); % 入口横坐标 star_y = [4,7:10,13]; % 入口纵坐标 hurdle_x = repelem(14:16,2); % 障碍 hurdle_x = cat(2,hurdle_x,[20 20]); hurdle_y = repmat(8:9,1,3); hurdle_y = cat(2,hurdle_y,[5 12]); final_x = ones(1,4)\\\\*h; % 出口 final_y = [3,6,11,14]; x=n+2; % 边界矩阵宽 y=h+2; % 边界矩阵长 platform=ones(n,h); %初始化平台 obstacle_map=ones(n+4,h+4); %设置非障碍矩阵 obstacle_map(1:2,:)=0; obstacle_map(end-1:end,:)=0; obstacle_map(:,1:2)=0; obstacle_map(:,end-1:end); border=ones(x,y); %边界矩阵 border(1,:)=0; border(end,:)=0; border(:,1)=0; border(:,end)=0; Sm=ones(n+4,h+4); % 图 Sm(1:2,:)=0; Sm(end-1:end,:)=0; Sm(:,1:2)=0; Sm(:,end-1:end); for i = 1:size(hurdle_y,2) Sm(hurdle_y(i)+2,hurdle_x(i)+2)=0; %设置障碍 obstacle_map(hurdle_y(i)+2,hurdle_x(i)+2)=0; %设置障碍 end step=1; %初始迭代次数 po=1:1:9; %位置矩阵 pp = zeros(1,9); neigh = [-1,-1;0,-1;1,-1;-1,0;0,0;1,0;-1,1;0,1;1,1]; L=zeros(n,h,size(final_y,2)); % 不含边界距离矩阵 N=zeros(n+2,h+2,size(final_y,2)); % 元胞潜力 N_choose=zeros(n+2,h+2); % 最终选择 P=zeros(n+2,h+2); %预留内存 prob=zeros(1,9); %概率矩阵、预留内存 go=0; % 出发人数 arrive=0; % 到达终点人数 total=960; % 迭代时间 time_people_star = zeros(n,h,total); % 记录时刻平台信息 \",\"这里设置了 4 个 map：\",\"platform：反应平台实时状态\",\"border：在 platform 外加了一圈障碍，表示边界条件。\",\"Sm 与 obstacle：在 platform 外加了两圈障碍，分别用计算 $ O*{i, j} $ 与 $ D_{i, j} $。\"]},\"51\":{\"h\":\"参数计算\",\"t\":[\"Li,j​ 的计算：\",\"Dis = zeros(n+2,h+2,size(final_y,2)); Dis = Dis + inf; % 分别计算边界内每个原胞到出口的距离 for f=1:size(final_y,2) for i=1:n for j=1:h L(i,j,f)=sqrt((i-final_y(f))^2+(j-final_x(f))^2); %不含边界的距离矩阵 Lij end end end Dis(2:n+1,2:h+1,:)=L; for i = 1:size(hurdle_y,2) Dis(hurdle_y(i)+1,hurdle_x(i)+1,:)=inf; %障碍视为距离无穷 end \",\"Oi,j​ 与 Di,j​ 的计算：\",\"O=obstacle_map(1:x,2:y+1)+obstacle_map(3:x+2,2:y+1)+obstacle_map(2:x+1,1:y)+obstacle_map(2:x+1,3:y+2)+obstacle_map(1:x,1:y)+obstacle_map(3:x+2,1:y)+obstacle_map(1:x,3:y+2)+obstacle_map(3:x+2,3:y+2); D=Sm(1:x,2:y+1)+Sm(3:x+2,2:y+1)+Sm(2:x+1,1:y)+Sm(2:x+1,3:y+2)+Sm(1:x,1:y)+Sm(3:x+2,1:y)+Sm(1:x,3:y+2)+Sm(3:x+2,3:y+2); \",\"这段代码思想为用一个 n-2×n-2 大小的滑动窗口在 n×n 的平台上，依次从需要计算的 8 个周边位置滑动，最后得到所求，可以自己手动画一个图验证一下。\",\"计算元胞潜力：\",\"% 计算原胞潜力 N for f = 1:size(final_y,2) for i=1:x for j=1:y N(i,j,f)=border(i,j)*exp(-5*Dis(i,j,f)+D(i,j)+O(i,j)); end end end for i = 1:size(final_y,2) N(final_y(i)+1,final_x(i)+1)=1e10; % 设置出口原胞潜力为 1e10，可视为无穷大 end N_1 = max(N(:,:,1),N(:,:,2)); %最大作为原胞潜力 N N_2 = max(N(:,:,3),N(:,:,4)); N_choose = max(N_1,N_2); \",\"这里因为有四个入口，所以需要分别计算四个出口的元胞潜力大小，最后取最大。\",\"位置更新：\",\"for j=h+1:-1:2 for i=2:n+1 if(border(i,j)==0) %如果位置（即原胞）有人，计算所有邻居原胞的原胞潜力N % 计算位置1到9各原胞潜力大小，并进行归一化处理 for xy = po pp(1,xy) = N_choose(i+neigh(xy,2),j+neigh(xy,1)); end prob = pp/sum(pp); if sum([pp(2),pp(3),pp(6),pp(8),pp(9)]~=0) % 上下前三个方向不全都有人 S=randsrc(1,1,[po;prob]); %依原胞潜力N，选择下一位置，即进行位置更新 else S = 5; end k = i + neigh(S,2); t = j + neigh(S,1); if platform(k-1,t-1)==0 % 选择新位置已占，则选回原位置 S = 5; k = i + neigh(S,2); t = j + neigh(S,1); end platform(i-1,j-1)=1; % 位置更新，原来原胞更新为空状态 platform(k-1,t-1)=0; % 位置更新，新选择原胞更新为占有状态 end end end \",\"这里用 border 矩阵进行计算，然后在 platform 上进行更新，最后把再 border = platform ，从而实现每一次迭代的整体更新。此外，代码设定，如果上下和前面三个位置共 5 个位置没有人的话才进行选择，否则就待在原地，贴近现实中人是向前走的；如果选择的位置被占，则待在原地。代码从离平台近的位置向远处开始遍历，反应人流变化的方向与源头。\"]},\"52\":{\"h\":\"结果\",\"t\":[\"图4 动态演示\",\"图5 热力图（迭代周期960s）\",\"完整代码\"]},\"53\":{\"c\":[\"交通\"]},\"54\":{\"c\":[\"traffic\"]},\"55\":{\"h\":\"0-1规划模型最短路\"},\"56\":{\"h\":\"Heading 2\",\"t\":[\"Here is the content.\"]},\"57\":{\"h\":\"Heading 3\",\"t\":[\"Here is the content.\"]},\"58\":{\"c\":[\"交通\"]},\"59\":{\"c\":[\"traffic\"]},\"60\":{\"h\":\"增长系数法 GUI\"},\"61\":{\"h\":\"Heading 2\",\"t\":[\"Here is the content.\"]},\"62\":{\"h\":\"Heading 3\",\"t\":[\"Here is the content.\"]},\"63\":{\"c\":[\"交通\"]},\"64\":{\"c\":[\"traffic\"]},\"65\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"66\":{\"h\":\"ML\"},\"67\":{\"h\":\"Myself\"},\"68\":{\"h\":\"Traffic\"},\"69\":{\"h\":\"Paper\"},\"70\":{\"h\":\"English\"},\"71\":{\"h\":\"Traffic\"},\"72\":{\"h\":\"Traffic Planning\"},\"73\":{\"h\":\"Traffic Theory\"}},\"dirtCount\":0,\"index\":[[\"增长系数法\",{\"0\":{\"60\":1}}],[\"完整代码\",{\"1\":{\"52\":1}}],[\"迭代周期960s\",{\"1\":{\"52\":1}}],[\"迭代时间\",{\"1\":{\"50\":1}}],[\"热力图\",{\"1\":{\"52\":1}}],[\"动态演示\",{\"1\":{\"52\":1}}],[\"结果\",{\"0\":{\"52\":1}}],[\"贴近现实中人是向前走的\",{\"1\":{\"51\":1}}],[\"上进行更新\",{\"1\":{\"51\":1}}],[\"上下前三个方向不全都有人\",{\"1\":{\"51\":1}}],[\"然后在\",{\"1\":{\"51\":1}}],[\"矩阵进行计算\",{\"1\":{\"51\":1}}],[\"新选择原胞更新为占有状态\",{\"1\":{\"51\":1}}],[\"原来原胞更新为空状态\",{\"1\":{\"51\":1}}],[\"原因大致有以下几点\",{\"1\":{\"2\":1}}],[\"则待在原地\",{\"1\":{\"51\":1}}],[\"则选回原位置\",{\"1\":{\"51\":1}}],[\"则该格变为\",{\"1\":{\"20\":1}}],[\"则该格继续保持\",{\"1\":{\"20\":1}}],[\"选择新位置已占\",{\"1\":{\"51\":1}}],[\"选择下一位置\",{\"1\":{\"51\":1}}],[\"依原胞潜力n\",{\"1\":{\"51\":1}}],[\"依次从需要计算的\",{\"1\":{\"51\":1}}],[\"~=0\",{\"1\":{\"51\":1}}],[\"并进行归一化处理\",{\"1\":{\"51\":1}}],[\"并行性\",{\"1\":{\"19\":1}}],[\"有人\",{\"1\":{\"51\":1}}],[\"有时间也会加入书评\",{\"1\":{\"4\":1}}],[\"位置更新\",{\"1\":{\"51\":3}}],[\"位置矩阵\",{\"1\":{\"50\":1}}],[\"可视为无穷大\",{\"1\":{\"51\":1}}],[\"可以自己手动画一个图验证一下\",{\"1\":{\"51\":1}}],[\"可以发现\",{\"1\":{\"48\":1}}],[\"计算位置1到9各原胞潜力大小\",{\"1\":{\"51\":1}}],[\"计算所有邻居原胞的原胞潜力n\",{\"1\":{\"51\":1}}],[\"计算原胞潜力\",{\"1\":{\"51\":1}}],[\"计算元胞潜力\",{\"1\":{\"51\":1}}],[\"计算单元\",{\"1\":{\"21\":1}}],[\"大小的滑动窗口在\",{\"1\":{\"51\":1}}],[\"大小分别为\",{\"1\":{\"45\":1}}],[\"^2\",{\"1\":{\"51\":1}}],[\"^2+\",{\"1\":{\"51\":1}}],[\"+o\",{\"1\":{\"51\":1}}],[\"+obstacle\",{\"1\":{\"51\":7}}],[\"+d\",{\"1\":{\"51\":1}}],[\"+sm\",{\"1\":{\"51\":7}}],[\"+1\",{\"1\":{\"51\":4}}],[\"+\",{\"1\":{\"51\":5}}],[\"+2\",{\"1\":{\"50\":4}}],[\"参数计算\",{\"0\":{\"51\":1}}],[\"参数设置\",{\"0\":{\"50\":1}}],[\"$\",{\"1\":{\"50\":4}}],[\"外加了两圈障碍\",{\"1\":{\"50\":1}}],[\"外加了一圈障碍\",{\"1\":{\"50\":1}}],[\"与\",{\"1\":{\"50\":2,\"51\":1}}],[\"与不占有\",{\"1\":{\"47\":1}}],[\"表示边界条件\",{\"1\":{\"50\":1}}],[\"反应人流变化的方向与源头\",{\"1\":{\"51\":1}}],[\"反应平台实时状态\",{\"1\":{\"50\":1}}],[\"反应了元胞有人占据\",{\"1\":{\"48\":1}}],[\"记录时刻平台信息\",{\"1\":{\"50\":1}}],[\"记录博主更新历程及计划\",{\"1\":{\"4\":1}}],[\"到达终点人数\",{\"1\":{\"50\":1}}],[\"出发人数\",{\"1\":{\"50\":1}}],[\"出口\",{\"1\":{\"50\":1}}],[\"gui\",{\"0\":{\"60\":1}}],[\"go=0\",{\"1\":{\"50\":1}}],[\"global\",{\"1\":{\"21\":1}}],[\"概率矩阵\",{\"1\":{\"50\":1}}],[\"概述\",{\"0\":{\"44\":1}}],[\"预留内存\",{\"1\":{\"50\":2}}],[\"zeros\",{\"1\":{\"50\":2,\"51\":1}}],[\"初始迭代次数\",{\"1\":{\"50\":1}}],[\"初始化平台\",{\"1\":{\"50\":1}}],[\"设置出口原胞潜力为\",{\"1\":{\"51\":1}}],[\"设置障碍\",{\"1\":{\"50\":2}}],[\"设置非障碍矩阵\",{\"1\":{\"50\":1}}],[\"障碍视为距离无穷\",{\"1\":{\"51\":1}}],[\"障碍\",{\"1\":{\"50\":1}}],[\"入口纵坐标\",{\"1\":{\"50\":1}}],[\"入口横坐标\",{\"1\":{\"50\":1}}],[\"入门\",{\"1\":{\"6\":1}}],[\"6\",{\"1\":{\"50\":2,\"51\":1}}],[\"代码从离平台近的位置向远处开始遍历\",{\"1\":{\"51\":1}}],[\"代码设定\",{\"1\":{\"51\":1}}],[\"代码流程图\",{\"1\":{\"49\":1}}],[\"代码整体思路如下\",{\"1\":{\"49\":1}}],[\"代表不占有\",{\"1\":{\"48\":1}}],[\"代表占有\",{\"1\":{\"48\":1}}],[\"代表位置\",{\"1\":{\"48\":2}}],[\"部分代码解释\",{\"0\":{\"49\":1}}],[\"9\",{\"1\":{\"48\":2,\"50\":4,\"51\":1}}],[\"960s\",{\"1\":{\"45\":1}}],[\"环境的动态影响\",{\"1\":{\"48\":1}}],[\"环境中静止物体的影响\",{\"1\":{\"48\":1}}],[\"为指标\",{\"1\":{\"48\":1}}],[\"为位置为\",{\"1\":{\"48\":2}}],[\"为元胞动态势能\",{\"1\":{\"48\":1}}],[\"为元胞静态势能\",{\"1\":{\"48\":1}}],[\"分别计算边界内每个原胞到出口的距离\",{\"1\":{\"51\":1}}],[\"分别用计算\",{\"1\":{\"50\":1}}],[\"分别为对应系数\",{\"1\":{\"48\":1}}],[\"分类\",{\"1\":{\"44\":1}}],[\"k\",{\"1\":{\"51\":4}}],[\"k1​li\",{\"1\":{\"48\":1}}],[\"kd​\",{\"1\":{\"48\":1}}],[\"ks​\",{\"1\":{\"48\":1}}],[\"ks​si\",{\"1\":{\"48\":1}}],[\"和\",{\"1\":{\"48\":1}}],[\"当元胞占有时\",{\"1\":{\"48\":1}}],[\"处的元胞潜能\",{\"1\":{\"48\":1}}],[\"处元胞状态\",{\"1\":{\"48\":1}}],[\"j+neigh\",{\"1\":{\"51\":1}}],[\"j=h+1\",{\"1\":{\"51\":1}}],[\"j=1\",{\"1\":{\"51\":2}}],[\"j\",{\"1\":{\"48\":5,\"50\":2,\"51\":11}}],[\"j​+k3​di\",{\"1\":{\"48\":1}}],[\"j​+k2​oi\",{\"1\":{\"48\":1}}],[\"j​+ko​oi\",{\"1\":{\"48\":1}}],[\"j​+kd​di\",{\"1\":{\"48\":1}}],[\"j​=kl​li\",{\"1\":{\"48\":1}}],[\"j​=0\",{\"1\":{\"48\":1}}],[\"j​=ei\",{\"1\":{\"48\":2}}],[\"j​\",{\"1\":{\"48\":11,\"51\":3}}],[\"j​exp\",{\"1\":{\"48\":2}}],[\"更新规则即行人如何选择下一步走到哪里一个方格\",{\"1\":{\"48\":1}}],[\"更新规则\",{\"0\":{\"48\":1}}],[\"更新各部分文章\",{\"1\":{\"7\":1}}],[\"采用固定型\",{\"1\":{\"47\":1}}],[\"采用基本\",{\"1\":{\"47\":1}}],[\"划分为方格形\",{\"1\":{\"47\":1}}],[\"状态设置为占有\",{\"1\":{\"47\":1}}],[\"基本设置\",{\"0\":{\"47\":1}}],[\"基本概念\",{\"1\":{\"13\":1}}],[\"平面示意图\",{\"1\":{\"45\":1}}],[\"平台长度\",{\"1\":{\"50\":1}}],[\"平台宽度\",{\"1\":{\"50\":1}}],[\"平台\",{\"1\":{\"45\":1}}],[\"平台基本信息\",{\"1\":{\"45\":1}}],[\"规定仿真时间为\",{\"1\":{\"45\":1}}],[\"行人随机从各个入口进入\",{\"1\":{\"45\":1}}],[\"行人每秒走一格\",{\"1\":{\"45\":1}}],[\"行人不得通过障碍\",{\"1\":{\"45\":1}}],[\"行人流仿真按仿真规模可以大致分为三种\",{\"1\":{\"44\":1}}],[\"行人流仿真是通过模拟人群在不同环境下的移动\",{\"1\":{\"44\":1}}],[\"行人流仿真\",{\"0\":{\"43\":1}}],[\"中间设有障碍\",{\"1\":{\"45\":1}}],[\"中的一种离散计算模型\",{\"1\":{\"14\":1}}],[\"均为\",{\"1\":{\"45\":1}}],[\"右四个出口\",{\"1\":{\"45\":1}}],[\"左三个入口\",{\"1\":{\"45\":1}}],[\"问题描述\",{\"0\":{\"45\":1}}],[\"格子气模型以及基于机器学习的模型等\",{\"1\":{\"44\":1}}],[\"此外\",{\"1\":{\"44\":1,\"51\":1}}],[\"不含边界的距离矩阵\",{\"1\":{\"51\":1}}],[\"不含边界距离矩阵\",{\"1\":{\"50\":1}}],[\"不同方法并非只适用于一个规模\",{\"1\":{\"44\":1}}],[\"不想走出舒适圈\",{\"1\":{\"1\":1}}],[\"⏩\",{\"1\":{\"44\":1}}],[\"既研究整体特征也研究个体特征\",{\"1\":{\"44\":1}}],[\"人群中每个个体有着相同的行为特征\",{\"1\":{\"44\":1}}],[\"人格\",{\"1\":{\"3\":1}}],[\"介观\",{\"1\":{\"44\":1}}],[\"介于宏微观之间\",{\"1\":{\"44\":2}}],[\"以个体为研究对象\",{\"1\":{\"44\":1}}],[\"以整个人群为研究对象\",{\"1\":{\"44\":1}}],[\"流向等\",{\"1\":{\"44\":1}}],[\"密度\",{\"1\":{\"44\":1}}],[\"研究个体行为\",{\"1\":{\"44\":1}}],[\"研究整体移动特征如速度\",{\"1\":{\"44\":1}}],[\"研究行人行为及心理的特点的研究\",{\"1\":{\"44\":1}}],[\"这段代码思想为用一个\",{\"1\":{\"51\":1}}],[\"这里用\",{\"1\":{\"51\":1}}],[\"这里因为有四个入口\",{\"1\":{\"51\":1}}],[\"这里设置了\",{\"1\":{\"50\":1}}],[\"这里以位置为\",{\"1\":{\"48\":1}}],[\"这里主要考虑为出口与障碍物\",{\"1\":{\"48\":1}}],[\"这里引入元胞潜能\",{\"1\":{\"48\":1}}],[\"这里是我学习更新博客的阶段性工作记录\",{\"1\":{\"5\":1}}],[\"这三种\",{\"1\":{\"44\":1}}],[\"微观\",{\"1\":{\"44\":2}}],[\"宏观\",{\"1\":{\"44\":2}}],[\"即进行位置更新\",{\"1\":{\"51\":1}}],[\"即原胞\",{\"1\":{\"51\":1}}],[\"即可得到选择\",{\"1\":{\"48\":1}}],[\"即该处元胞潜能为\",{\"1\":{\"48\":1}}],[\"即\",{\"1\":{\"44\":1}}],[\"即按一定方式对空间划分\",{\"1\":{\"16\":1}}],[\"建筑平面设计等方面有着广泛的应用\",{\"1\":{\"44\":1}}],[\"疏散计划\",{\"1\":{\"44\":1}}],[\"请先移步这篇文章\",{\"1\":{\"43\":1}}],[\"本文探讨基于\",{\"1\":{\"43\":1}}],[\"本节简单介绍一下元胞自动机模型\",{\"1\":{\"13\":1}}],[\"prob\",{\"1\":{\"51\":2}}],[\"prob=zeros\",{\"1\":{\"50\":1}}],[\"po\",{\"1\":{\"51\":2}}],[\"po=1\",{\"1\":{\"50\":1}}],[\"people\",{\"1\":{\"50\":1}}],[\"pedestrians\",{\"1\":{\"44\":1}}],[\"pedestrian\",{\"0\":{\"43\":1},\"1\":{\"44\":1}}],[\"p=zeros\",{\"1\":{\"50\":1}}],[\"pp\",{\"1\":{\"50\":1,\"51\":8}}],[\"platform\",{\"1\":{\"50\":3,\"51\":5}}],[\"platform=ones\",{\"1\":{\"50\":1}}],[\"planning\",{\"0\":{\"72\":1},\"1\":{\"44\":2}}],[\"pi\",{\"1\":{\"48\":1}}],[\"psychological\",{\"1\":{\"44\":1}}],[\"paper\",{\"0\":{\"69\":1}}],[\"patterns\",{\"1\":{\"44\":1}}],[\"parts\",{\"1\":{\"21\":1}}],[\"佛洛依德算法\",{\"0\":{\"33\":1}}],[\"迪杰斯特拉算法\",{\"0\":{\"28\":1}}],[\"改进a\",{\"0\":{\"23\":1}}],[\"d=sm\",{\"1\":{\"51\":1}}],[\"d\",{\"1\":{\"50\":1}}],[\"dis\",{\"1\":{\"51\":6}}],[\"discrete\",{\"1\":{\"21\":1}}],[\"di\",{\"1\":{\"48\":2,\"51\":1}}],[\"dynamic\",{\"1\":{\"44\":1}}],[\"design\",{\"1\":{\"44\":1}}],[\"dead\",{\"1\":{\"21\":1}}],[\"h+1\",{\"1\":{\"51\":1}}],[\"h+2\",{\"1\":{\"50\":3,\"51\":1}}],[\"h+4\",{\"1\":{\"50\":2}}],[\"h\",{\"1\":{\"50\":4,\"51\":1}}],[\"hurdle\",{\"1\":{\"50\":11,\"51\":3}}],[\"h=30\",{\"1\":{\"50\":1}}],[\"has\",{\"1\":{\"21\":2}}],[\"here\",{\"1\":{\"9\":1,\"10\":1,\"24\":1,\"25\":1,\"29\":1,\"30\":1,\"34\":1,\"35\":1,\"39\":1,\"40\":1,\"56\":1,\"57\":1,\"61\":1,\"62\":1}}],[\"heading\",{\"0\":{\"9\":1,\"10\":1,\"24\":1,\"25\":1,\"29\":1,\"30\":1,\"34\":1,\"35\":1,\"39\":1,\"40\":1,\"56\":1,\"57\":1,\"61\":1,\"62\":1}}],[\"english\",{\"0\":{\"70\":1}}],[\"end\",{\"1\":{\"50\":11,\"51\":14}}],[\"else\",{\"1\":{\"51\":1}}],[\"exp\",{\"1\":{\"51\":1}}],[\"extensive\",{\"1\":{\"44\":1}}],[\"ei\",{\"1\":{\"48\":2}}],[\"evacuation\",{\"1\":{\"44\":1}}],[\"every\",{\"1\":{\"21\":1}}],[\"each\",{\"1\":{\"21\":2}}],[\"edg\",{\"1\":{\"3\":1}}],[\"repmat\",{\"1\":{\"50\":1}}],[\"repelem\",{\"1\":{\"50\":1}}],[\"r=1\",{\"1\":{\"47\":1}}],[\"rules\",{\"1\":{\"21\":2}}],[\"ryan\",{\"0\":{\"5\":1}}],[\"f\",{\"1\":{\"51\":6}}],[\"f=1\",{\"1\":{\"51\":1}}],[\"found\",{\"1\":{\"65\":1}}],[\"for\",{\"1\":{\"50\":1,\"51\":11}}],[\"format\",{\"1\":{\"50\":1}}],[\"force\",{\"1\":{\"44\":1}}],[\"follows\",{\"1\":{\"21\":1}}],[\"fluid\",{\"1\":{\"44\":1}}],[\"flame\",{\"1\":{\"3\":1}}],[\"final\",{\"1\":{\"50\":4,\"51\":8}}],[\"finds\",{\"1\":{\"44\":1}}],[\"five\",{\"1\":{\"21\":1}}],[\"模拟行人穿过以平台\",{\"1\":{\"45\":1}}],[\"模拟现实复杂动态系统\",{\"1\":{\"21\":1}}],[\"模型设置\",{\"0\":{\"46\":1}}],[\"模型也可以在微观层面研究\",{\"1\":{\"44\":1}}],[\"模型\",{\"1\":{\"43\":1}}],[\"模型的行人流仿真\",{\"1\":{\"43\":1}}],[\"模型的基本单元\",{\"1\":{\"15\":1}}],[\"模型最为关键的部分\",{\"1\":{\"19\":1}}],[\"化学\",{\"1\":{\"21\":1}}],[\"作为物理\",{\"1\":{\"21\":1}}],[\"应用\",{\"0\":{\"21\":1}}],[\"应用等方面\",{\"1\":{\"13\":1}}],[\"图5\",{\"1\":{\"52\":1}}],[\"图4\",{\"1\":{\"52\":1}}],[\"图\",{\"1\":{\"50\":1}}],[\"图3\",{\"1\":{\"49\":1}}],[\"图2\",{\"1\":{\"20\":1,\"48\":1}}],[\"图1\",{\"1\":{\"17\":1,\"45\":1}}],[\"​s<2∨s>3s=2s=3​\",{\"1\":{\"20\":1}}],[\"νt\",{\"1\":{\"20\":1}}],[\"α\",{\"1\":{\"20\":2}}],[\"various\",{\"1\":{\"44\":1}}],[\"vt+1\",{\"1\":{\"20\":1}}],[\"von\",{\"1\":{\"14\":1,\"17\":2}}],[\"用函数表示如下\",{\"1\":{\"20\":1}}],[\"死\",{\"1\":{\"20\":1}}],[\"死亡\",{\"1\":{\"20\":2}}],[\"否则就待在原地\",{\"1\":{\"51\":1}}],[\"否则就变为\",{\"1\":{\"20\":1}}],[\"否则继续保持\",{\"1\":{\"20\":1}}],[\"生物过程的基础模型\",{\"1\":{\"21\":1}}],[\"生\",{\"1\":{\"20\":2}}],[\"生命游戏是最著名的二维元胞自动机生命游戏\",{\"1\":{\"20\":1}}],[\"生命游戏\",{\"0\":{\"20\":1},\"1\":{\"20\":1}}],[\"个周边位置滑动\",{\"1\":{\"51\":1}}],[\"个位置没有人的话才进行选择\",{\"1\":{\"51\":1}}],[\"个位置的选择概率\",{\"1\":{\"48\":1}}],[\"个位置进行标号\",{\"1\":{\"48\":1}}],[\"个邻居中有\",{\"1\":{\"20\":1}}],[\"个为\",{\"1\":{\"20\":1}}],[\"个\",{\"1\":{\"20\":2,\"50\":1}}],[\"8\",{\"1\":{\"20\":2,\"50\":1,\"51\":2}}],[\"若它的\",{\"1\":{\"20\":2}}],[\"活着\",{\"1\":{\"20\":3}}],[\"邻居中有\",{\"1\":{\"20\":1}}],[\"邻居\",{\"1\":{\"20\":1}}],[\"邻居定义为\",{\"1\":{\"17\":1}}],[\"邻居定义为下式\",{\"1\":{\"17\":1}}],[\"该游戏采用标准\",{\"1\":{\"20\":1}}],[\"或活着\",{\"1\":{\"20\":1}}],[\"其中\",{\"1\":{\"48\":2}}],[\"其定义如下\",{\"1\":{\"48\":1}}],[\"其他方法还有网络模型\",{\"1\":{\"44\":1}}],[\"其在城市规划\",{\"1\":{\"44\":1}}],[\"其元胞规则为\",{\"1\":{\"20\":1}}],[\"其状态可能是死亡\",{\"1\":{\"20\":1}}],[\"其实很早就萌生过写\",{\"1\":{\"1\":1}}],[\"它由二维元胞网格组成\",{\"1\":{\"20\":1}}],[\"年设计\",{\"1\":{\"20\":1}}],[\"年代在洛斯阿拉莫斯国家实验室同时提出\",{\"1\":{\"14\":1}}],[\"由john\",{\"1\":{\"20\":1}}],[\"由局部到整体\",{\"1\":{\"19\":1}}],[\"高维度\",{\"1\":{\"19\":1}}],[\"服从相同的规律分布方式相同\",{\"1\":{\"19\":1}}],[\"同质性\",{\"1\":{\"19\":1}}],[\"时间及状态都是离散的\",{\"1\":{\"19\":1}}],[\"空间\",{\"1\":{\"19\":1}}],[\"离散型\",{\"1\":{\"19\":1}}],[\"相关信息\",{\"1\":{\"19\":1,\"45\":1}}],[\"相互作用\",{\"1\":{\"19\":1}}],[\"从而实现每一次迭代的整体更新\",{\"1\":{\"51\":1}}],[\"从而引起全局的变化\",{\"1\":{\"19\":1}}],[\"从概念上就可以理解元胞就好似生物体的细胞\",{\"1\":{\"15\":1}}],[\"映射型\",{\"1\":{\"18\":1}}],[\"边界矩阵\",{\"1\":{\"50\":1}}],[\"边界矩阵长\",{\"1\":{\"50\":1}}],[\"边界矩阵宽\",{\"1\":{\"50\":1}}],[\"边界元胞为元胞每个维度内侧邻近元胞\",{\"1\":{\"18\":1}}],[\"边界元胞与自己相同\",{\"1\":{\"18\":1}}],[\"边界条件是元胞空间外的部分\",{\"1\":{\"18\":1}}],[\"边界条件\",{\"0\":{\"18\":1},\"1\":{\"47\":1}}],[\"每个行人占一格\",{\"1\":{\"45\":1}}],[\"每个个体有着独特的行为特征\",{\"1\":{\"44\":1}}],[\"每个个体没有行为特征\",{\"1\":{\"44\":1}}],[\"每个元胞按照该规则进行状态更新\",{\"1\":{\"19\":1}}],[\"每个元胞按照当前状态及周围邻居的状态来更新下一时刻该元胞状态\",{\"1\":{\"19\":1}}],[\"每个维度的第一个元胞与最后一个元胞互为边界\",{\"1\":{\"18\":1}}],[\"每一个元胞都有一个状态\",{\"1\":{\"15\":1}}],[\"虚拟的元胞\",{\"1\":{\"18\":1}}],[\"注\",{\"1\":{\"18\":1}}],[\"绝热型\",{\"1\":{\"18\":1}}],[\"绝热型和映射型这四种\",{\"1\":{\"18\":1}}],[\"绝对的宿命论主义倾向\",{\"1\":{\"3\":1}}],[\"周期型\",{\"1\":{\"18\":2}}],[\"周边盆友的影响👬\",{\"1\":{\"2\":1}}],[\"固定型\",{\"1\":{\"18\":2}}],[\"常见是元胞自动机模型\",{\"1\":{\"44\":1}}],[\"常见模型是社会力模型\",{\"1\":{\"44\":1}}],[\"常见的模型\",{\"1\":{\"4\":1}}],[\"常用为固定型和周期型\",{\"1\":{\"18\":1}}],[\"常用的邻居边界条件类型有\",{\"1\":{\"18\":1}}],[\"∣x−x0​∣+∣y−y0​∣<=r\",{\"1\":{\"17\":1}}],[\"∣x−x0​∣<=r\",{\"1\":{\"17\":1}}],[\"∣y−y0​∣<=r\",{\"1\":{\"17\":1}}],[\"y+2\",{\"1\":{\"51\":6}}],[\"y+1\",{\"1\":{\"51\":4}}],[\"y=h+2\",{\"1\":{\"50\":1}}],[\"y\",{\"1\":{\"17\":2,\"50\":11,\"51\":15}}],[\"y0​\",{\"1\":{\"17\":2}}],[\"xy\",{\"1\":{\"51\":4}}],[\"x+1\",{\"1\":{\"51\":4}}],[\"x+2\",{\"1\":{\"51\":6}}],[\"x=n+2\",{\"1\":{\"50\":1}}],[\"x\",{\"1\":{\"17\":2,\"50\":8,\"51\":10}}],[\"x0​\",{\"1\":{\"17\":2}}],[\"=1\",{\"1\":{\"51\":1}}],[\"=1e10\",{\"1\":{\"51\":1}}],[\"==0\",{\"1\":{\"51\":2}}],[\"=border\",{\"1\":{\"51\":1}}],[\"=inf\",{\"1\":{\"51\":1}}],[\"=l\",{\"1\":{\"51\":1}}],[\"=sqrt\",{\"1\":{\"51\":1}}],[\"=0\",{\"1\":{\"50\":12,\"51\":1}}],[\"=⎩⎨⎧​0\",{\"1\":{\"20\":1}}],[\"=\",{\"1\":{\"17\":2,\"50\":12,\"51\":18}}],[\"not\",{\"1\":{\"65\":1}}],[\"n×n\",{\"1\":{\"51\":1}}],[\"n+1\",{\"1\":{\"51\":2}}],[\"n+2\",{\"1\":{\"50\":3,\"51\":1}}],[\"n+4\",{\"1\":{\"50\":2}}],[\"n=zeros\",{\"1\":{\"50\":1}}],[\"n=16\",{\"1\":{\"50\":1}}],[\"n\",{\"1\":{\"50\":4,\"51\":16}}],[\"ni\",{\"1\":{\"48\":3}}],[\"ns模型\",{\"0\":{\"38\":1}}],[\"neigh\",{\"1\":{\"50\":1,\"51\":4}}],[\"neighbors\",{\"1\":{\"21\":1}}],[\"neighbor\",{\"1\":{\"21\":1}}],[\"neumann\",{\"1\":{\"14\":1,\"17\":2}}],[\"nv​\",{\"1\":{\"17\":1}}],[\"nm​\",{\"1\":{\"17\":1}}],[\"型\",{\"1\":{\"17\":1,\"47\":1}}],[\"型和\",{\"1\":{\"17\":1}}],[\"最大作为原胞潜力\",{\"1\":{\"51\":1}}],[\"最后把再\",{\"1\":{\"51\":1}}],[\"最后取最大\",{\"1\":{\"51\":1}}],[\"最后得到所求\",{\"1\":{\"51\":1}}],[\"最后对\",{\"1\":{\"48\":1}}],[\"最终选择\",{\"1\":{\"50\":1}}],[\"最为常见方法为流体动力学模型\",{\"1\":{\"44\":1}}],[\"最常用的邻居类型是\",{\"1\":{\"17\":1}}],[\"最初由stanislaw\",{\"1\":{\"14\":1}}],[\"在\",{\"1\":{\"50\":2}}],[\"在外围补上固定不变的\",{\"1\":{\"18\":1}}],[\"在二维空间下\",{\"1\":{\"17\":1}}],[\"在此表示十分感谢\",{\"1\":{\"1\":1}}],[\"取决于元胞状态更新时所要搜索的空间域\",{\"1\":{\"17\":1}}],[\"等类型\",{\"1\":{\"16\":1}}],[\"正六边形\",{\"1\":{\"16\":1}}],[\"正方形\",{\"1\":{\"16\":1}}],[\"三角形\",{\"1\":{\"16\":1}}],[\"类似栅格化\",{\"1\":{\"16\":1}}],[\"复杂情况下也有多维\",{\"1\":{\"15\":1}}],[\"0\",{\"0\":{\"55\":1},\"1\":{\"15\":1,\"20\":1,\"21\":1,\"47\":1,\"48\":2,\"50\":6}}],[\"如果选择的位置被占\",{\"1\":{\"51\":1}}],[\"如果上下和前面三个位置共\",{\"1\":{\"51\":1}}],[\"如果位置\",{\"1\":{\"51\":1}}],[\"如果你还不了解\",{\"1\":{\"43\":1}}],[\"如果之前有所记录就很便于回忆\",{\"1\":{\"2\":1}}],[\"如图一所示\",{\"1\":{\"17\":1}}],[\"如\",{\"1\":{\"15\":1,\"44\":1}}],[\"是为了让最外围元胞能够有像内部元胞一样的邻域条件所创建的虚拟元胞\",{\"1\":{\"18\":1}}],[\"是否为邻居\",{\"1\":{\"17\":1}}],[\"是模型迭代的直接参与者\",{\"1\":{\"15\":1}}],[\"是自动机理论\",{\"1\":{\"14\":1}}],[\"下面将分别做进一步阐述\",{\"1\":{\"14\":1}}],[\"下面来\",{\"1\":{\"1\":1}}],[\"五大部分\",{\"1\":{\"14\":1}}],[\"元胞潜力\",{\"1\":{\"50\":1}}],[\"元胞潜能可以写为\",{\"1\":{\"48\":1}}],[\"元胞动态势能反应行人在选择下一步时\",{\"1\":{\"48\":1}}],[\"元胞静态势能反应了行人在选择下一步时\",{\"1\":{\"48\":1}}],[\"元胞的状态更新规则变化是同步进行的\",{\"1\":{\"19\":1}}],[\"元胞类型\",{\"1\":{\"17\":1}}],[\"元胞呈一定形状\",{\"1\":{\"16\":1}}],[\"元胞是\",{\"1\":{\"15\":1}}],[\"元胞规则是整个\",{\"1\":{\"19\":1}}],[\"元胞规则即每次迭代\",{\"1\":{\"19\":1}}],[\"元胞规则\",{\"0\":{\"19\":1},\"1\":{\"14\":1}}],[\"元胞边界\",{\"1\":{\"14\":1}}],[\"元胞邻居是某一元胞周围的元胞\",{\"1\":{\"17\":1}}],[\"元胞邻居\",{\"0\":{\"17\":1},\"1\":{\"14\":1,\"47\":1}}],[\"元胞空间划分方式大致有\",{\"1\":{\"16\":1}}],[\"元胞空间为空间内元胞的集合\",{\"1\":{\"16\":1}}],[\"元胞空间\",{\"0\":{\"16\":1},\"1\":{\"14\":1,\"47\":1}}],[\"元胞\",{\"0\":{\"15\":1},\"1\":{\"14\":1,\"47\":1}}],[\"元胞自动机的应用大致有以下几类\",{\"1\":{\"21\":1}}],[\"元胞自动机是一类无穷维动力系统\",{\"1\":{\"19\":1}}],[\"元胞自动机更新规则特征\",{\"1\":{\"19\":1}}],[\"元胞自动机\",{\"0\":{\"13\":1},\"1\":{\"14\":1}}],[\"世纪\",{\"1\":{\"14\":1}}],[\"世界杯\",{\"1\":{\"3\":1}}],[\"世界之本质\",{\"1\":{\"3\":1}}],[\"于\",{\"1\":{\"14\":1}}],[\"o=obstacle\",{\"1\":{\"51\":1}}],[\"o\",{\"1\":{\"50\":1}}],[\"obstacle\",{\"1\":{\"50\":7}}],[\"oi\",{\"1\":{\"48\":1,\"51\":1}}],[\"ones\",{\"1\":{\"50\":2}}],[\"on\",{\"1\":{\"21\":1}}],[\"or\",{\"1\":{\"21\":2}}],[\"of\",{\"1\":{\"14\":1,\"21\":2,\"44\":1}}],[\"oyh的帮助\",{\"1\":{\"1\":1}}],[\"定义为\",{\"1\":{\"48\":1}}],[\"定义\",{\"0\":{\"14\":1}}],[\"具体讲解可以看这篇文章与这篇文章\",{\"1\":{\"13\":1}}],[\"包括其定义\",{\"1\":{\"13\":1}}],[\"3\",{\"0\":{\"10\":1,\"25\":1,\"30\":1,\"35\":1,\"40\":1,\"57\":1,\"62\":1},\"1\":{\"20\":2,\"50\":2,\"51\":14}}],[\"choose\",{\"1\":{\"51\":2}}],[\"choose=zeros\",{\"1\":{\"50\":1}}],[\"changes\",{\"1\":{\"21\":1}}],[\"clear\",{\"1\":{\"50\":1}}],[\"clc\",{\"1\":{\"50\":1}}],[\"crowds\",{\"1\":{\"44\":1}}],[\"current\",{\"1\":{\"21\":1}}],[\"cell\",{\"1\":{\"21\":7}}],[\"cellular\",{\"0\":{\"13\":1},\"1\":{\"14\":1,\"21\":2,\"44\":1}}],[\"complete\",{\"1\":{\"21\":1}}],[\"computing\",{\"1\":{\"21\":2}}],[\"conway于\",{\"1\":{\"20\":1}}],[\"content\",{\"1\":{\"9\":1,\"10\":1,\"24\":1,\"25\":1,\"29\":1,\"30\":1,\"34\":1,\"35\":1,\"39\":1,\"40\":1,\"56\":1,\"57\":1,\"61\":1,\"62\":1}}],[\"cat\",{\"1\":{\"50\":2}}],[\"can\",{\"1\":{\"21\":1}}],[\"ca\",{\"1\":{\"14\":1,\"15\":1,\"19\":1,\"43\":2,\"44\":2}}],[\"csuer\",{\"1\":{\"3\":1}}],[\"i+neigh\",{\"1\":{\"51\":1}}],[\"if\",{\"1\":{\"51\":3}}],[\"i=2\",{\"1\":{\"51\":1}}],[\"i=1\",{\"1\":{\"51\":2}}],[\"i\",{\"1\":{\"48\":5,\"50\":7,\"51\":17}}],[\"it\",{\"1\":{\"21\":1,\"44\":1}}],[\"is\",{\"1\":{\"9\":1,\"10\":1,\"21\":1,\"24\":1,\"25\":1,\"29\":1,\"30\":1,\"34\":1,\"35\":1,\"39\":1,\"40\":1,\"56\":1,\"57\":1,\"61\":1,\"62\":1}}],[\"inf\",{\"1\":{\"51\":1}}],[\"infj\",{\"1\":{\"3\":1}}],[\"includes\",{\"1\":{\"21\":1}}],[\"in\",{\"1\":{\"21\":2,\"44\":2}}],[\"introduction\",{\"0\":{\"0\":1}}],[\"算法\",{\"0\":{\"8\":1,\"23\":1}}],[\"算法整理\",{\"1\":{\"4\":1}}],[\"arrive=0\",{\"1\":{\"50\":1}}],[\"architectural\",{\"1\":{\"44\":1}}],[\"aspects\",{\"1\":{\"44\":1}}],[\"applications\",{\"1\":{\"21\":1,\"44\":1}}],[\"at\",{\"1\":{\"21\":1}}],[\"alive\",{\"1\":{\"21\":1}}],[\"and\",{\"1\":{\"21\":4,\"44\":3}}],[\"automaton\",{\"1\":{\"21\":2}}],[\"automata\",{\"0\":{\"13\":1},\"1\":{\"14\":2,\"21\":1,\"44\":1}}],[\"a\",{\"0\":{\"8\":1},\"1\":{\"21\":4}}],[\"about\",{\"1\":{\"1\":1}}],[\"✏️\",{\"1\":{\"7\":1}}],[\"7\",{\"0\":{\"7\":1},\"1\":{\"50\":1}}],[\"2×n\",{\"1\":{\"51\":1}}],[\"20\",{\"1\":{\"14\":1,\"50\":2}}],[\"2024\",{\"0\":{\"6\":2,\"7\":2}}],[\"2\",{\"0\":{\"7\":1,\"9\":1,\"24\":1,\"29\":1,\"34\":1,\"39\":1,\"56\":1,\"61\":1},\"1\":{\"19\":1,\"20\":1,\"50\":10,\"51\":24}}],[\"搭框架\",{\"1\":{\"6\":1}}],[\"5\",{\"0\":{\"6\":1,\"7\":1},\"1\":{\"50\":1,\"51\":4}}],[\"404\",{\"1\":{\"65\":1}}],[\"40\",{\"1\":{\"14\":1}}],[\"4\",{\"0\":{\"6\":1},\"1\":{\"50\":3,\"51\":1}}],[\"1规划模型最短路\",{\"0\":{\"55\":1}}],[\"1e10\",{\"1\":{\"51\":1}}],[\"11\",{\"1\":{\"50\":1}}],[\"12\",{\"1\":{\"50\":1}}],[\"16\",{\"1\":{\"50\":1}}],[\"16×30\",{\"1\":{\"45\":1}}],[\"14\",{\"1\":{\"50\":2}}],[\"13\",{\"1\":{\"50\":1}}],[\"10\",{\"1\":{\"50\":1}}],[\"1×4\",{\"1\":{\"45\":1}}],[\"1×1\",{\"1\":{\"45\":3}}],[\"1970\",{\"1\":{\"20\":1}}],[\"1\",{\"0\":{\"6\":1},\"1\":{\"14\":1,\"15\":1,\"20\":2,\"21\":1,\"47\":1,\"48\":1,\"50\":29,\"51\":31}}],[\"which\",{\"1\":{\"21\":1}}],[\"who\",{\"1\":{\"3\":1}}],[\"welcome\",{\"1\":{\"5\":1}}],[\"的平台上\",{\"1\":{\"51\":1}}],[\"的计算\",{\"1\":{\"51\":2}}],[\"的元胞周围空元胞数目\",{\"1\":{\"48\":1}}],[\"的元胞周边的非障碍数目\",{\"1\":{\"48\":1}}],[\"的元胞距出口的距离\",{\"1\":{\"48\":1}}],[\"的格子\",{\"1\":{\"20\":2}}],[\"的\",{\"0\":{\"5\":1}}],[\"的想法\",{\"1\":{\"1\":1}}],[\"l\",{\"1\":{\"51\":1}}],[\"l=zeros\",{\"1\":{\"50\":1}}],[\"lij\",{\"1\":{\"51\":1}}],[\"li\",{\"1\":{\"48\":1,\"51\":1}}],[\"layout\",{\"1\":{\"44\":1}}],[\"lee\",{\"0\":{\"5\":1}}],[\"lol\",{\"1\":{\"3\":2}}],[\"感谢你看到这里\",{\"1\":{\"4\":1}}],[\"❤️\",{\"1\":{\"4\":2}}],[\"英文总结\",{\"1\":{\"21\":1}}],[\"英文\",{\"1\":{\"4\":1}}],[\"英语\",{\"1\":{\"4\":1}}],[\"总结自己参加数模比赛过程中\",{\"1\":{\"4\":1}}],[\"数模\",{\"1\":{\"4\":1}}],[\"笔记及代码\",{\"1\":{\"4\":1}}],[\"机器学习\",{\"1\":{\"4\":1}}],[\"交通管理\",{\"1\":{\"44\":1}}],[\"交通方面的理论知识\",{\"1\":{\"4\":1}}],[\"交通方向的英文文献\",{\"1\":{\"4\":1}}],[\"交通\",{\"1\":{\"4\":1},\"2\":{\"11\":1,\"22\":1,\"26\":1,\"31\":1,\"36\":1,\"41\":1,\"53\":1,\"58\":1,\"63\":1}}],[\"随笔等其他内容\",{\"1\":{\"4\":1}}],[\"乐评\",{\"1\":{\"4\":1}}],[\"自然模型\",{\"1\":{\"44\":1}}],[\"自学内容的整理等\",{\"1\":{\"4\":1}}],[\"自我感觉是一个矛盾体\",{\"1\":{\"3\":1}}],[\"自我评价\",{\"1\":{\"3\":1}}],[\"小研究\",{\"1\":{\"4\":1}}],[\"指南\",{\"0\":{\"4\":1}}],[\"国足进世界杯\",{\"1\":{\"3\":1}}],[\"国家队比赛\",{\"1\":{\"3\":1}}],[\"统一\",{\"1\":{\"3\":1}}],[\"t\",{\"1\":{\"51\":4}}],[\"total\",{\"1\":{\"50\":1}}],[\"total=960\",{\"1\":{\"50\":1}}],[\"triggering\",{\"1\":{\"21\":1}}],[\"traffic\",{\"0\":{\"68\":1,\"71\":1,\"72\":1,\"73\":1},\"1\":{\"44\":1},\"2\":{\"12\":1,\"27\":1,\"32\":1,\"37\":1,\"42\":1,\"54\":1,\"59\":1,\"64\":1}}],[\"time\",{\"1\":{\"21\":1,\"50\":1}}],[\"thereby\",{\"1\":{\"21\":1}}],[\"their\",{\"1\":{\"21\":1}}],[\"theory\",{\"0\":{\"73\":1},\"1\":{\"14\":1,\"21\":1}}],[\"the\",{\"1\":{\"9\":1,\"10\":1,\"21\":3,\"24\":1,\"25\":1,\"29\":1,\"30\":1,\"34\":1,\"35\":1,\"39\":1,\"40\":1,\"44\":1,\"56\":1,\"57\":1,\"61\":1,\"62\":1}}],[\"twin\",{\"1\":{\"3\":1}}],[\"talk\",{\"1\":{\"1\":1}}],[\"冰岛\",{\"1\":{\"3\":1}}],[\"欧洲游\",{\"1\":{\"3\":1}}],[\"欧洲杯\",{\"1\":{\"3\":1}}],[\"欧冠\",{\"1\":{\"3\":1}}],[\"亚冠\",{\"1\":{\"3\":1}}],[\"现场看一次球赛\",{\"1\":{\"3\":1}}],[\"现场看一场\",{\"1\":{\"3\":1}}],[\"看一次霉妈的演唱会\",{\"1\":{\"3\":1}}],[\"看待问题十分的现实\",{\"1\":{\"3\":1}}],[\"mesoscopic\",{\"1\":{\"44\":1}}],[\"microscopic\",{\"1\":{\"44\":1}}],[\"max\",{\"1\":{\"51\":3}}],[\"map\",{\"1\":{\"50\":6,\"51\":8}}],[\"map=ones\",{\"1\":{\"50\":1}}],[\"macroscopic\",{\"1\":{\"44\":1}}],[\"management\",{\"1\":{\"44\":1}}],[\"many\",{\"1\":{\"21\":1}}],[\"movement\",{\"1\":{\"44\":1}}],[\"modeling\",{\"1\":{\"44\":1}}],[\"model\",{\"1\":{\"21\":2,\"44\":2}}],[\"moore邻居选择示意图\",{\"1\":{\"48\":1}}],[\"moore\",{\"1\":{\"17\":2,\"20\":2,\"47\":1}}],[\"ml\",{\"0\":{\"66\":1},\"1\":{\"4\":1}}],[\"msi\",{\"1\":{\"3\":1}}],[\"myself\",{\"0\":{\"67\":1},\"1\":{\"1\":1}}],[\"赛\",{\"1\":{\"3\":1}}],[\"比赛\",{\"1\":{\"3\":2}}],[\"进入到梦中情组\",{\"1\":{\"3\":1}}],[\"探究生命的意义\",{\"1\":{\"3\":1}}],[\"却也逐渐看清了生活的本质\",{\"1\":{\"3\":1}}],[\"梦想很多\",{\"1\":{\"3\":1}}],[\"⚽\",{\"1\":{\"3\":1}}],[\"足球\",{\"1\":{\"3\":1}}],[\"吉他\",{\"1\":{\"3\":1}}],[\"唱歌\",{\"1\":{\"3\":1}}],[\"听歌\",{\"1\":{\"3\":1}}],[\"爱好\",{\"1\":{\"3\":1}}],[\"绿老头一枚\",{\"1\":{\"3\":1}}],[\"🎸\",{\"1\":{\"3\":1}}],[\"🎤\",{\"1\":{\"3\":1}}],[\"🎧\",{\"1\":{\"3\":1}}],[\"🍓\",{\"1\":{\"3\":1}}],[\"🏫\",{\"1\":{\"3\":1}}],[\"s=randsrc\",{\"1\":{\"51\":1}}],[\"sum\",{\"1\":{\"51\":2}}],[\"sm\",{\"1\":{\"50\":6}}],[\"sm=ones\",{\"1\":{\"50\":1}}],[\"short\",{\"1\":{\"50\":1}}],[\"size\",{\"1\":{\"50\":3,\"51\":5}}],[\"si\",{\"1\":{\"48\":2}}],[\"simulating\",{\"1\":{\"44\":1}}],[\"simulation\",{\"0\":{\"43\":1},\"1\":{\"21\":1,\"44\":1}}],[\"social\",{\"1\":{\"44\":1}}],[\"scnarios\",{\"1\":{\"44\":1}}],[\"studies\",{\"1\":{\"44\":1}}],[\"step=1\",{\"1\":{\"50\":1}}],[\"step\",{\"1\":{\"21\":1}}],[\"star\",{\"1\":{\"50\":3}}],[\"stage\",{\"0\":{\"6\":1,\"7\":1}}],[\"state\",{\"1\":{\"3\":1,\"21\":4}}],[\"set\",{\"1\":{\"21\":1}}],[\"space\",{\"1\":{\"21\":1}}],[\"s\",{\"1\":{\"3\":1,\"51\":6}}],[\"swiftie\",{\"1\":{\"3\":1}}],[\"成分\",{\"1\":{\"3\":1}}],[\"水瓶座\",{\"1\":{\"3\":1}}],[\"星座\",{\"1\":{\"3\":1}}],[\"urban\",{\"1\":{\"44\":1}}],[\"ulam和john\",{\"1\":{\"14\":1}}],[\"university\",{\"1\":{\"3\":1}}],[\"updates\",{\"1\":{\"21\":1}}],[\"up\",{\"1\":{\"2\":1}}],[\"就无法选择\",{\"1\":{\"48\":1}}],[\"就是那个california\",{\"1\":{\"3\":1}}],[\"就显得非常合适\",{\"1\":{\"2\":1}}],[\"对元胞潜能进行归一化\",{\"1\":{\"48\":1}}],[\"对行人流仿真进一步了解可以移步此篇论文\",{\"1\":{\"44\":1}}],[\"对于\",{\"1\":{\"20\":2}}],[\"对\",{\"1\":{\"3\":1}}],[\"一般常用为固定型和周期型边界条件\",{\"1\":{\"18\":1}}],[\"一般为二维\",{\"1\":{\"15\":1}}],[\"一个完整的元胞自动机模型包含\",{\"1\":{\"14\":1}}],[\"一枚\",{\"1\":{\"3\":1}}],[\"一名在读\",{\"1\":{\"3\":1}}],[\"一时难以消化吸收\",{\"1\":{\"1\":1}}],[\"职业\",{\"1\":{\"3\":1}}],[\"我\",{\"0\":{\"3\":1}}],[\"我会逐步去完善\",{\"1\":{\"1\":1}}],[\"尝试新的记录生活的方式\",{\"1\":{\"2\":1}}],[\"走出舒适圈\",{\"1\":{\"2\":1}}],[\"而且复习过程中也苦于没有地方整理\",{\"1\":{\"2\":1}}],[\"学过的知识都记不清了\",{\"1\":{\"2\":1}}],[\"写过的很多代码\",{\"1\":{\"2\":1}}],[\"写在前面\",{\"0\":{\"1\":1}}],[\"发现自己之前做过的很多小项目\",{\"1\":{\"2\":1}}],[\"准备夏令营过程中\",{\"1\":{\"2\":1}}],[\"目前博客内容主要为过去做过的一些项目\",{\"1\":{\"4\":1}}],[\"目前小小的愿望清单\",{\"1\":{\"3\":1}}],[\"目前先尝试一个\",{\"1\":{\"2\":1}}],[\"目前还是处于入门小白阶段\",{\"1\":{\"1\":1}}],[\"主要为自学\",{\"1\":{\"4\":1}}],[\"主要记录本专业一些基础模型的代码实现\",{\"1\":{\"4\":1}}],[\"主\",{\"1\":{\"2\":1}}],[\"音乐区\",{\"1\":{\"2\":1}}],[\"想当一个知识区博主\",{\"1\":{\"2\":1}}],[\"决定写\",{\"1\":{\"2\":1}}],[\"缘由\",{\"0\":{\"2\":1}}],[\"内容方面有待优化\",{\"1\":{\"1\":1}}],[\"布局\",{\"1\":{\"1\":1}}],[\"还有很多排版\",{\"1\":{\"1\":1}}],[\"🔨\",{\"1\":{\"6\":1}}],[\"📝\",{\"1\":{\"3\":1}}],[\"💭\",{\"1\":{\"3\":1}}],[\"👐\",{\"1\":{\"2\":1}}],[\"💖\",{\"1\":{\"1\":1}}],[\"👋\",{\"1\":{\"0\":1}}],[\"让我顺利解决了很多问题\",{\"1\":{\"1\":1}}],[\"border\",{\"1\":{\"50\":5,\"51\":3}}],[\"border=ones\",{\"1\":{\"50\":1}}],[\"boundary\",{\"1\":{\"21\":1}}],[\"by\",{\"1\":{\"44\":1}}],[\"based\",{\"1\":{\"21\":1}}],[\"behavioral\",{\"1\":{\"44\":1}}],[\"be\",{\"1\":{\"21\":1}}],[\"bushi\",{\"1\":{\"3\":1}}],[\"bug\",{\"1\":{\"1\":1}}],[\"blog\",{\"0\":{\"5\":1},\"1\":{\"1\":1,\"2\":2,\"4\":1}}],[\"过程中还遇到很多莫名其妙的小\",{\"1\":{\"1\":1}}],[\"很早就有的想法\",{\"1\":{\"2\":1}}],[\"很多新东西从未见过\",{\"1\":{\"1\":1}}],[\"很麻烦\",{\"1\":{\"1\":1}}],[\"刚开始的过程确实很难\",{\"1\":{\"1\":1}}],[\"所以需要分别计算四个出口的元胞潜力大小\",{\"1\":{\"51\":1}}],[\"所以最后\",{\"1\":{\"48\":1}}],[\"所以便有了现在这个页面\",{\"1\":{\"1\":1}}],[\"所以迟迟不肯行动\",{\"1\":{\"1\":1}}],[\"觉得还是要尝试些新东西\",{\"1\":{\"1\":1}}],[\"但还是希望自己未来能成为一个有用之人\",{\"1\":{\"3\":1}}],[\"但还好有dream\",{\"1\":{\"1\":1}}],[\"但同时也是一个理想的完美主义者\",{\"1\":{\"3\":1}}],[\"但痛定思痛\",{\"1\":{\"1\":1}}],[\"但总感觉很难\",{\"1\":{\"1\":1}}],[\"欢迎来到我的博客\",{\"1\":{\"0\":1}}],[\"简介\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
